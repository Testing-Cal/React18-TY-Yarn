name: Continuous Integration

on:
  workflow_dispatch:
    inputs:
      github_metadata:
        default: '{"general":{"name":"React18-TY-Yarn_CI","repoName":"React18-TY-Yarn","sonarProjectKey":"Tenant950174_React18-TY-Yarn","helmReleaseName":"react18-ty-yarn","contextPath":"/react18","sonarHost":"https://sonarqube.tenant604134.ibdp.calibo.com","tenant":"Tenant950174","lazsaDomainUri":"https://lazsa-dis.calibo.com","devopsSettingId":"3c7e6b67-e0bc-4bb7-9260-9f9e7bad20b8","agentApiKey":"zMhoTfcHkPZb4XM2z7TdmFj8iql6P0buiq8IWNw2oegAQdhejQ+mlaPLjpMkhxeOVQ3+LGdLan+lmyXXsSnky+xRw88dkWnBnJh6yytW55zcV0jby8DpKBva3hGKHMLZBXvyK/3zk9koZ+GROkHexJgI4hUGKkzTw8TtSG1ZaLiUkaC8ypY8n/wqwABWuLwfsA/SHQTYfLLdSGJNy7rEgKK8hkLCBu2OksPXRE1DSao=","agentId":"d32f0932-76e1-41d8-a7ca-e5f424544a79","orchCertCredentialId":"","ingressAddress":"a9040801b609640dbae60fc7d6d05d15-2b3a83815293e673.elb.us-east-1.amazonaws.com","sonarOrg":"default-organization","artifactory":"JFROG","ArtifactoryHostSecret":"JFROG_URL","ArtifactoryUserSecret":"DOCKERHUB_USERNAME","ArtifactoryPasswordSecret":"DOCKERHUB_TOKEN","artifactorySecret":"Tenant950174-38f4e023-93dc-4fec-851b-b6db3317356d-JFROG","kubernetesSecret":"Tenant950174-9e5ed13d-35a1-480b-b490-610a75f04524","containerScanType":"","dynamicJenkinsStage":"false","stageFlag":"{\"sonarScan\":true,\"zapScan\":false,\"containerScan\":false,\"qualysScan\":false,\"FunctionalTesting\":false}","dockerHostIP":"","containerImagePath":"artifactory.tenant604134.ibdp.calibo.com/testing-docker-dev-local/githubactionsdemo/react18-ty-yarn","sonarSecret":"Tenant950174-336451cb-b0fc-45e9-9f6e-d3f1e4704a3b-sonar","artifactPublish":false},"docker":{"appPort":"3023","hostPort":"3023"},"helm":{"additionalArguments":"","additionalFiles":"","workingDirectory":"helm_chart","namespace":"demo","type":"lazsa","values":""},"kubernetes":{"namespace":"demo","replicaCount":"1","resources":{"limits":{"cpu":"500m","memory":"512Mi"},"requests":{"cpu":"200m","memory":"256Mi"}},"ingress":{"enabled":true,"paths":{"path":"/react18"},"hosts":["ingress.devtools.ibdp.calibo.com"],"ingressClass":"nginx","controllerType":"nginx"},"service":{"type":"ClusterIP","internalport":"3023"}}}'
        type: string
        required: false

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    environment:
      name: 'Dev'
    env:
      NODE_IMAGE: "public.ecr.aws/lazsa/node:20.11.1"
      KUBECTL_IMAGE_VERSION: "bitnami/kubectl:1.28" #https://hub.docker.com/r/bitnami/kubectl/tags
      HELM_IMAGE_VERSION: "alpine/helm:3.8.1" #https://hub.docker.com/r/alpine/helm/tags
      OC_IMAGE_VERSION: "quay.io/openshift/origin-cli:4.9.0" #https://quay.io/repository/openshift/origin-cli?tab=tags
      SONAR_IMAGE_VERSION: "sonarsource/sonar-scanner-cli:11.0"


    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
          
      - name: Initialization
        run: |
          JSON_STRING='${{ vars.BUILD_METADATA }}'
         
          echo "REGISTRY_URL=$(echo "$JSON_STRING" | jq -r '.general.containerImagePath')" >> "$GITHUB_ENV"
          echo "BUILD_TAG=${{ github.run_number }}"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY_CREDENTIALS=$(echo "$JSON_STRING" | jq -r '.general.artifactorySecret')"  >> "$GITHUB_ENV"
          echo "SONAR_CREDENTIAL_ID=$(echo "$JSON_STRING" | jq -r '.general.sonarSecret')"  >> "$GITHUB_ENV"
          echo "ARTIFACTORY=$(echo "$JSON_STRING" | jq -r '.general.artifactory')"  >> "$GITHUB_ENV"
          echo "STAGE_FLAG=$(echo "$JSON_STRING" | jq -r '.general.stageFlag')"  >> "$GITHUB_ENV"
          echo "CONTAINER_SCAN_TYPE=$(echo "$JSON_STRING" | jq -r '.general.containerScanType')"  >> "$GITHUB_ENV"
          echo "DOCKERHOST=$(echo "$JSON_STRING" | jq -r '.general.dockerHostIP')"  >> "$GITHUB_ENV"
          echo "RELEASE_NAME=$(echo "$JSON_STRING" | jq -r '.general.name')"  >> "$GITHUB_ENV"
          echo "CONTEXT=$(echo "$JSON_STRING" | jq -r '.general.contextPath')" >> "$GITHUB_ENV"
          echo "sonar_org=$(echo "$JSON_STRING" | jq -r '.general.sonarOrg')" >> "$GITHUB_ENV"
          echo "sonar_host=$(echo "$JSON_STRING" | jq -r '.general.sonarHost')" >> "$GITHUB_ENV"
          echo "sonar_project_key=$(echo "$JSON_STRING" | jq -r '.general.sonarProjectKey')" >> "$GITHUB_ENV"
          echo "ArtifactoryUserSecret=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryUserSecret')" >> "$GITHUB_ENV"
          echo "ArtifactoryPasswordSecret=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryPasswordSecret')" >> "$GITHUB_ENV"
          echo "ARTIFACT_HOST_SECRET=$(echo "$JSON_STRING" | jq -r '.general.ArtifactoryHostSecret')" >> "$GITHUB_ENV"
          

      - name: Build
        run: |
          echo "no build"

      - name: Unit Test
        run: |
          docker run --rm --user root -v "$GITHUB_WORKSPACE":/opt/repo -w /opt/repo $NODE_IMAGE /bin/bash -c "cd /opt/repo && yarn install && yarn test -- --coverage --watchAll=false && yarn run test:coverage"
    
      - name: SonarQube Scan
        run: |
         
          sed -i s+#SONAR_URL#+"$sonar_host"+g ./sonar-project.properties
          sed -i s+#SONAR_LOGIN#+"${{ secrets.TENANT950174_336451CB_B0FC_45E9_9F6E_D3F1E4704A3B_SONAR }}"+g ./sonar-project.properties
          sed -i s+#RELEASE_NAME#+"$sonar_project_key"+g ./sonar-project.properties
          sed -i s+#SONAR_ORGANIZATION#+"$sonar_org"+g ./sonar-project.properties
          cat ./sonar-project.properties
          docker run --rm --user root -v "$GITHUB_WORKSPACE":/opt/repo -w /opt/repo $NODE_IMAGE /bin/bash -c "chown -R root:root /opt/repo && yarn add sonarqube-scanner -f && yarn run sonar"

      - name: Build Container Image
        run: |
          docker build -t "$REGISTRY_URL:$BUILD_TAG" -t "$REGISTRY_URL:latest" .
      
      - name: Setup JFrog CLI
        if: env.CONTAINER_SCAN_TYPE == 'XRAY'
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets[env.ARTIFACT_HOST_SECRET] }}
          JF_ACCESS_TOKEN: ${{ secrets[env.ArtifactoryPasswordSecret] }}

      - name: Container Image Scan
        if: env.CONTAINER_SCAN_TYPE == 'XRAY'
        run: jf docker scan $REGISTRY_URL:$BUILD_TAG
          
      - name: Publish Container Image
        run: |
          if [[ $ARTIFACTORY == "ECR" ]]
          then
            ECR_REGION=$(echo "$REGISTRY_URL" | cut -d'.' -f4)
            set +x 
            AWS_ACCESS_KEY_ID=${{ secrets[env.ArtifactoryUserSecret] }} AWS_SECRET_ACCESS_KEY=${{ secrets[env.ArtifactoryPasswordSecret] }} aws ecr get-login-password --region "$ECR_REGION" | docker login --username AWS --password-stdin $DOCKER_LOGIN_URL 
            set -x
          else
            docker login -u ${{ secrets[env.ArtifactoryUserSecret] }} -p ${{ secrets[env.ArtifactoryPasswordSecret] }} "$REGISTRY_URL"
          fi
          
          docker push "$REGISTRY_URL:$BUILD_TAG"
          docker push "$REGISTRY_URL:latest"

          
      
        
      
